import { IVulnerabilityType } from "@/types/vulnerability";
import { ECOSYSTEM_NAME, SOURCE_NAME } from "@/utilities/constants";
import { EPSSData, formatRelativeTime } from "@/utilities/util";
import { Badge, Card } from "react-bootstrap";
import {
  CountPill,
  RenderAffectedPill,
  RenderEPSS
} from "./shared/UtilityComponents";

interface VulnerabilityCardProps {
  vulnerability: IVulnerabilityType;
  onVulnerabilityClick?: (vulnerability: IVulnerabilityType) => void;
}

export const severityVariants = {
  CRITICAL: "danger",
  HIGH: "warning",
  MEDIUM: "info",
  LOW: "success"
} as const;

const statusVariants = {
  ACTIVE: "danger",
  RESOLVED: "success",
  MITIGATED: "primary"
} as const;

export default function VulnerabilityCard({
  vulnerability,
  onVulnerabilityClick
}: VulnerabilityCardProps) {
  const formatCVSSScore = (cvss: any) => {
    if (!cvss) return null;
    return cvss.score || cvss.cvss_v3?.score;
  };

  const cvssScore = formatCVSSScore(
    vulnerability.cvss || vulnerability.cvss_severities?.cvss_v3
  );

  return (
    <Card
      className={`custom-card mb-3 h-100 ${
        onVulnerabilityClick ? "cursor-pointer" : ""
      }`}
    >
      <Card.Body className='d-flex flex-column p-3'>
        <div className='d-flex justify-content-between align-items-start mb-1'>
          <Card.Title
            className='h6 mb-1 text-dark'
            style={{ lineHeight: "1.3" }}
          >
            {vulnerability.summary || vulnerability.id}
          </Card.Title>
          {cvssScore && (
            <div className='d-flex align-items-center text-muted small ms-2'>
              <i className='bi bi-shield-exclamation me-1'></i>
              <strong className='text-dark'>{cvssScore}/10</strong>
            </div>
          )}
        </div>

        <div className='d-flex align-items-center mb-1'>
          <i className='bi bi-box me-1 text-muted small'></i>
          <code
            className='bg-light px-2 py-1 rounded small text-truncate'
            style={{ maxWidth: "200px" }}
          >
            {vulnerability.packageName}
          </code>
        </div>

        {vulnerability.cveId && (
          <div className='d-flex align-items-center mb-1'>
            <i className='bi bi-bug me-1 text-muted small'></i>
            <code className='bg-light px-2 py-1 rounded small'>
              {vulnerability.cveId}
            </code>
          </div>
        )}

        <div className='d-flex gap-1 mb-2 mt-2 flex-wrap'>
          <Badge
            bg={severityVariants[vulnerability.severity]}
            className='text-capitalize small'
          >
            {vulnerability.severity}
          </Badge>
          <Badge bg='outline' className='ecosystem-maven text-capitalize small'>
            {ECOSYSTEM_NAME[vulnerability.ecosystem] ?? vulnerability.ecosystem}
          </Badge>
          {vulnerability.status && (
            <Badge
              bg='outline'
              className='ecosystem-maven text-capitalize small'
            >
              {vulnerability.status}
            </Badge>
          )}
          {vulnerability?.epss?.percentage && (
            <RenderEPSS
              epss={vulnerability?.epss as EPSSData}
              displayType='card'
            />
          )}
        </div>

        <div className='mt-auto pt-2 border-top'>
          {vulnerability.affectedVersions &&
            vulnerability.affectedVersions.length > 0 && (
              <div className='col-12'>
                <div className='mb-2'>
                  <RenderAffectedPill
                    affectedVersions={vulnerability.affectedVersions}
                    className='mt-1'
                    variant='red'
                    label='Affected Versions'
                  />
                </div>
              </div>
            )}

          {vulnerability.patchedVersion && (
            <div className='col-12'>
              <div className='mb-2'>
                <CountPill
                  count={[vulnerability.patchedVersion]}
                  className='mt-1'
                  variant='green'
                  label='Patched Versions'
                />
              </div>
            </div>
          )}

          {vulnerability.source && (
            <div className='col-12'>
              <div className='d-flex align-items-center mb-2'>
                <CountPill
                  count={
                    SOURCE_NAME[vulnerability.source] ?? vulnerability.source
                  }
                  label='Source'
                  variant='grey'
                />
              </div>
            </div>
          )}

          {vulnerability.publishedDate && (
            <div className='col-12 mt-1'>
              <div className='d-flex align-items-center mb-1'>
                <CountPill
                  count={formatRelativeTime(vulnerability.publishedDate)}
                  label={
                    <>
                      <i className='bi bi-clock me-1 small'></i>Published
                    </>
                  }
                  variant='grey'
                />
              </div>
            </div>
          )}
        </div>

        {/* Click to view details */}
        <div className='mt-auto pt-2 border-top'>
          <div
            className='text-center'
            onClick={() => onVulnerabilityClick?.(vulnerability)}
          >
            <small className='text-muted'>
              <i className='bi bi-arrow-right-circle me-1'></i>
              Click to view details
            </small>
          </div>
        </div>
      </Card.Body>
    </Card>
  );
}
