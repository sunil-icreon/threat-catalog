import { IVulnerabilityType } from "@/types/vulnerability";
import { EPSSData } from "@/utilities/util";
import { Badge, Button, Card } from "react-bootstrap";
import { RenderEPSS } from "./shared/UtilityComponents";

interface VulnerabilityCardProps {
  vulnerability: IVulnerabilityType;
}

export const severityVariants = {
  CRITICAL: "danger",
  HIGH: "warning",
  MEDIUM: "info",
  LOW: "success"
} as const;

const statusVariants = {
  ACTIVE: "danger",
  RESOLVED: "success",
  MITIGATED: "primary"
} as const;

export default function VulnerabilityCard({
  vulnerability
}: VulnerabilityCardProps) {
  return (
    <Card className={`custom-card mb-3 h-100`}>
      <Card.Body className='d-flex flex-column'>
        <div className='d-flex justify-content-between align-items-start mb-3'>
          <div className='flex-grow-1'>
            <Card.Title className='h6 mb-2'>{vulnerability.summary}</Card.Title>
            <div className='d-flex gap-1 mb-2 flex-wrap severity-badge'>
              <Badge
                bg={severityVariants[vulnerability.severity]}
                className='text-capitalize small'
              >
                {vulnerability.severity}
              </Badge>
              <Badge
                bg='light'
                className={`ecosystem-npm ecosystem-${vulnerability.ecosystem} text-capitalize small`}
              >
                {vulnerability.ecosystem}
              </Badge>

              {vulnerability?.epss?.percentage ? (
                <RenderEPSS
                  epss={vulnerability?.epss as EPSSData}
                  displayType='card'
                />
              ) : (
                <></>
              )}

              {/* <Badge bg='secondary' className='text-capitalize small'>
                {vulnerability.status}
              </Badge> */}
            </div>
          </div>
          {vulnerability.cvssScore ? (
            <div className='d-flex align-items-center text-muted small'>
              <i className='bi bi-shield-check me-1'></i>
              <strong>{vulnerability.cvssScore}</strong>
            </div>
          ) : (
            ""
          )}
        </div>

        {vulnerability.description && (
          <Card.Text className='text-muted mb-3 flex-grow-1'>
            {vulnerability.description.length > 150
              ? `${vulnerability.description.substring(0, 150)}...`
              : vulnerability.description}
          </Card.Text>
        )}

        <div className='mb-3'>
          <div className='d-flex flex-wrap align-items-center mb-2'>
            <strong className='me-2 small'>Package:</strong>
            <code className='bg-light px-2 py-1 rounded break-all small package-name-cell-content mt-1'>
              {vulnerability.packageName}

              {/* @{vulnerability.packageVersion} */}
            </code>
          </div>

          {vulnerability.cveId && (
            <div className='d-flex flex-wrap align-items-center mb-2'>
              <strong className='me-2 small'>CVE:</strong>
              <code className='bg-light px-2 py-1 rounded small'>
                {vulnerability.cveId}
              </code>
            </div>
          )}

          <div className='d-flex align-items-center text-muted'>
            <i className='bi bi-clock me-1'></i>
            <small>
              Published:{" "}
              {new Date(vulnerability.publishedDate).toLocaleDateString()}
            </small>
          </div>
        </div>

        {vulnerability.affectedVersions &&
          vulnerability.affectedVersions.length > 0 && (
            <div className='mb-3'>
              <strong className='d-block mb-2 small'>Affected Versions:</strong>
              <div className='d-flex flex-wrap gap-1'>
                {vulnerability.affectedVersions
                  .slice(0, 3)
                  .map((version, index) => (
                    <Badge key={index} bg='danger' className='text-wrap small'>
                      {version}
                    </Badge>
                  ))}
                {vulnerability.affectedVersions.length > 3 && (
                  <Badge bg='secondary' className='small'>
                    +{vulnerability.affectedVersions.length - 3}
                  </Badge>
                )}
              </div>
            </div>
          )}

        {vulnerability.references && vulnerability.references.length > 0 && (
          <div className='mt-auto'>
            <Button
              variant='outline-primary'
              href={vulnerability.references[0]}
              target='_blank'
              rel='noopener noreferrer'
              className='w-100'
              size='sm'
            >
              <i className='bi bi-box-arrow-up-right me-1'></i>
              View Details
            </Button>
          </div>
        )}
      </Card.Body>
    </Card>
  );
}
