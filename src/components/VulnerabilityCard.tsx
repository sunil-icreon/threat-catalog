import { IVulnerabilityType } from "@/types/vulnerability";
import { EPSSData } from "@/utilities/util";
import { Button, Card } from "react-bootstrap";
import { PackageDetailLink } from "./shared/PackageDetailLink";
import { RenderEPSS } from "./shared/UtilityComponents";

interface VulnerabilityCardProps {
  vulnerability: IVulnerabilityType;
  onVulnerabilityClick?: (vulnerability: IVulnerabilityType) => void;
}

export const severityVariants = {
  CRITICAL: "danger",
  HIGH: "warning",
  MEDIUM: "info",
  LOW: "success"
} as const;

const statusVariants = {
  ACTIVE: "danger",
  RESOLVED: "success",
  MITIGATED: "primary"
} as const;

export default function VulnerabilityCard({
  vulnerability,
  onVulnerabilityClick
}: VulnerabilityCardProps) {
  const formatCVSSScore = (cvss: any) => {
    if (!cvss) return null;
    return cvss.score || cvss.cvss_v3?.score;
  };

  const cvssScore = formatCVSSScore(
    vulnerability.cvss || vulnerability.cvss_severities?.cvss_v3
  );

  const handleViewDetail = (e: any) => {
    e.preventDefault();
    onVulnerabilityClick?.(vulnerability);
  };

  return (
    <Card
      className={`custom-card mb-3 h-100 ${
        onVulnerabilityClick ? "cursor-pointer" : ""
      }`}
    >
      <Card.Body className='d-flex flex-column p-3'>
        <div className='d-flex justify-content-between align-items-start mb-1'>
          <Card.Title
            className='h6 mb-1 text-dark'
            style={{ lineHeight: "1.3" }}
          >
            {vulnerability.summary || vulnerability.id}
          </Card.Title>
          {cvssScore && (
            <div className='d-flex align-items-center text-muted small ms-2'>
              <i className='bi bi-shield-exclamation me-1'></i>
              <strong className='text-dark'>{cvssScore}/10</strong>
            </div>
          )}
        </div>

        <div className='security-advisory detailed'>
          <table className='advisory-metadata'>
            <tbody>
              {vulnerability.cveId && (
                <tr>
                  <th>Advisory ID:</th>
                  <td>
                    <strong>{vulnerability.id}</strong>
                  </td>
                </tr>
              )}

              <tr>
                <th>Severity:</th>
                <td>
                  <span
                    className={`text-${vulnerability.severity.toLocaleLowerCase()}`}
                  >
                    {vulnerability.severity}
                  </span>
                </td>
              </tr>

              {vulnerability?.epss?.percentage && (
                <tr>
                  <th>EPSS:</th>
                  <td>
                    <RenderEPSS
                      displayType='table'
                      epss={vulnerability?.epss as EPSSData}
                    />
                  </td>
                </tr>
              )}

              <tr>
                <th>Name:</th>
                <td>
                  <PackageDetailLink
                    ecoSystem={vulnerability.ecosystem}
                    packageName={vulnerability.packageName}
                  />
                  <i className='bi bi-box-arrow-up-right ms-1'></i>
                </td>
              </tr>
              <tr>
                <th>Ecosystem:</th>
                <td>{vulnerability.ecosystem}</td>
              </tr>

              {vulnerability.affectedVersions &&
                vulnerability.affectedVersions.length > 0 && (
                  <>
                    {vulnerability.patchedVersion && (
                      <tr>
                        <th>Patched Version:</th>
                        <td>
                          <PackageDetailLink
                            ecoSystem={vulnerability.ecosystem}
                            packageName={vulnerability.packageName}
                            label={vulnerability.patchedVersion}
                            version={vulnerability.patchedVersion}
                            className='text-green small text-decoration-none'
                          />

                          <i className='bi bi-box-arrow-up-right ms-1'></i>
                        </td>
                      </tr>
                    )}

                    <tr>
                      <th>Vulnerable Range:</th>
                      <td>
                        <div className='affected-list'>
                          {vulnerability.affectedVersions
                            .filter(Boolean)
                            .map((aff: string) => {
                              return aff.split(",").map((affected: string) => (
                                <code
                                  className='version vulnerable me-1'
                                  key={affected}
                                >
                                  {affected}
                                </code>
                              ));
                            })}
                        </div>
                      </td>
                    </tr>
                  </>
                )}
            </tbody>
          </table>
        </div>

        <div className='mt-auto pt-2 border-top'>
          <div className='text-center'>
            <Button onClick={handleViewDetail} variant='alt-link' type='button'>
              <small className='text-muted'>
                <i className='bi bi-arrow-right-circle me-1'></i>
                Click to view details
              </small>
            </Button>
          </div>
        </div>
      </Card.Body>
    </Card>
  );
}
