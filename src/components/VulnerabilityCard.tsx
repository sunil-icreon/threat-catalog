import { IVulnerabilityType } from "@/types/vulnerability";
import { EPSSData, formatRelativeTime } from "@/utilities/util";
import { Badge, Card } from "react-bootstrap";
import { RenderEPSS } from "./shared/UtilityComponents";

interface VulnerabilityCardProps {
  vulnerability: IVulnerabilityType;
  onVulnerabilityClick?: (vulnerability: IVulnerabilityType) => void;
}

export const severityVariants = {
  CRITICAL: "danger",
  HIGH: "warning",
  MEDIUM: "info",
  LOW: "success"
} as const;

const statusVariants = {
  ACTIVE: "danger",
  RESOLVED: "success",
  MITIGATED: "primary"
} as const;

export default function VulnerabilityCard({
  vulnerability,
  onVulnerabilityClick
}: VulnerabilityCardProps) {
  const formatCVSSScore = (cvss: any) => {
    if (!cvss) return null;
    return cvss.score || cvss.cvss_v3?.score;
  };

  const cvssScore = formatCVSSScore(
    vulnerability.cvss || vulnerability.cvss_severities?.cvss_v3
  );

  return (
    <Card
      className={`custom-card mb-3 h-100 ${
        onVulnerabilityClick ? "cursor-pointer" : ""
      }`}
    >
      <Card.Body className='d-flex flex-column p-3'>
        <div className='d-flex justify-content-between align-items-start mb-2'>
          <Card.Title
            className='h6 mb-1 text-dark'
            style={{ lineHeight: "1.3" }}
          >
            {vulnerability.summary || vulnerability.id}
          </Card.Title>
          {cvssScore && (
            <div className='d-flex align-items-center text-muted small ms-2'>
              <i className='bi bi-shield-exclamation me-1'></i>
              <strong className='text-dark'>{cvssScore}/10</strong>
            </div>
          )}
        </div>

        <div className='d-flex gap-1 mb-2 flex-wrap'>
          <Badge
            bg={severityVariants[vulnerability.severity]}
            className='text-capitalize small'
          >
            {vulnerability.severity}
          </Badge>
          <Badge
            bg='outline'
            className={`ecosystem-${vulnerability.ecosystem} text-capitalize small`}
          >
            {vulnerability.ecosystem}
          </Badge>
          {vulnerability.status && (
            <Badge
              bg={statusVariants[vulnerability.status]}
              className='text-capitalize small'
            >
              {vulnerability.status}
            </Badge>
          )}
          {vulnerability?.epss?.percentage && (
            <RenderEPSS
              epss={vulnerability?.epss as EPSSData}
              displayType='card'
            />
          )}
        </div>

        {/* Description */}
        {vulnerability.description && (
          <Card.Text
            className='text-muted mb-2 small'
            style={{ lineHeight: "1.4" }}
          >
            {vulnerability.description.length > 120
              ? `${vulnerability.description.substring(0, 120)}...`
              : vulnerability.description}
          </Card.Text>
        )}

        {/* Package and ID info */}
        <div className='mb-2'>
          <div className='d-flex align-items-center mb-1'>
            <i className='bi bi-box me-1 text-muted small'></i>
            <code
              className='bg-light px-2 py-1 rounded small text-truncate'
              style={{ maxWidth: "200px" }}
            >
              {vulnerability.packageName}
            </code>
          </div>

          {vulnerability.cveId && (
            <div className='d-flex align-items-center mb-1'>
              <i className='bi bi-bug me-1 text-muted small'></i>
              <code className='bg-light px-2 py-1 rounded small'>
                {vulnerability.cveId}
              </code>
            </div>
          )}

          <div className='d-flex align-items-center text-muted'>
            <i className='bi bi-clock me-1 small'></i>
            <small>{formatRelativeTime(vulnerability.publishedDate)}</small>
          </div>
        </div>

        {/* Affected versions and additional info */}
        {vulnerability.affectedVersions &&
          vulnerability.affectedVersions.length > 0 && (
            <div className='mb-2'>
              <div className='d-flex align-items-center mb-1'>
                <i className='bi bi-exclamation-triangle me-1 text-warning small'></i>
                <small className='text-muted'>Affected:</small>
              </div>
              <div className='d-flex flex-wrap gap-1'>
                {vulnerability.affectedVersions
                  .slice(0, 2)
                  .map((version, index) => (
                    <Badge
                      key={index}
                      bg='danger'
                      className='small'
                      style={{ fontSize: "0.65rem" }}
                    >
                      {version}
                    </Badge>
                  ))}
                {vulnerability.affectedVersions.length > 2 && (
                  <Badge
                    bg='secondary'
                    className='small'
                    style={{ fontSize: "0.65rem" }}
                  >
                    +{vulnerability.affectedVersions.length - 2}
                  </Badge>
                )}
              </div>
            </div>
          )}

        {/* Patched version */}
        {vulnerability.patchedVersion && (
          <div className='mb-2'>
            <div className='d-flex align-items-center mb-1'>
              <i className='bi bi-check-circle me-1 text-success small'></i>
              <small className='text-muted'>Fixed:</small>
            </div>
            <Badge
              bg='success'
              className='small'
              style={{ fontSize: "0.65rem" }}
            >
              {vulnerability.patchedVersion}
            </Badge>
          </div>
        )}

        {/* Source information */}
        {vulnerability.source && (
          <div className='mb-2'>
            <div className='d-flex align-items-center'>
              <i className='bi bi-shield me-1 text-muted small'></i>
              <small className='text-muted'>Source: </small>
              <Badge
                bg='outline-secondary'
                className='small ms-1'
                style={{ fontSize: "0.65rem" }}
              >
                {vulnerability.source}
              </Badge>
            </div>
          </div>
        )}

        {/* Click to view details */}
        <div className='mt-auto pt-2 border-top'>
          <div
            className='text-center'
            onClick={() => onVulnerabilityClick?.(vulnerability)}
          >
            <small className='text-muted'>
              <i className='bi bi-arrow-right-circle me-1'></i>
              Click to view details
            </small>
          </div>
        </div>
      </Card.Body>
    </Card>
  );
}
