import { IVulnerabilityType } from "@/types/vulnerability";
import { SOURCE_NAME } from "@/utilities/constants";
import { formatRelativeTime } from "@/utilities/util";
import { Badge, Card, Col, Row } from "react-bootstrap";

interface VulnerabilityDetailContentProps {
  vulnerability: IVulnerabilityType | null;
}

export default function VulnerabilityDetailContent({
  vulnerability
}: VulnerabilityDetailContentProps) {
  if (!vulnerability) return null;

  const formatCVSSScore = (cvss: any) => {
    if (!cvss) return null;
    return {
      score: cvss.score || cvss.cvss_v3?.score,
      vector: cvss.vector_string || cvss.cvss_v3?.vector_string
    };
  };

  /**
   * Parses CVSS vector string into human-readable format
   * Example: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
   * becomes a table with Attack Vector: Network, Attack Complexity: Low, etc.
   */
  const parseCVSSVector = (vectorString: string) => {
    if (!vectorString) return null;

    const vectorMap: { [key: string]: { [key: string]: string } } = {
      AV: {
        N: "Network",
        A: "Adjacent Network",
        L: "Local",
        P: "Physical"
      },
      AC: {
        L: "Low",
        H: "High"
      },
      PR: {
        N: "None",
        L: "Low",
        H: "High"
      },
      UI: {
        N: "None",
        R: "Required"
      },
      S: {
        U: "Unchanged",
        C: "Changed"
      },
      C: {
        N: "None",
        L: "Low",
        H: "High"
      },
      I: {
        N: "None",
        L: "Low",
        H: "High"
      },
      A: {
        N: "None",
        L: "Low",
        H: "High"
      },
      E: {
        U: "Unproven",
        P: "Proof of Concept",
        F: "Functional",
        H: "High",
        X: "Not Defined"
      },
      RL: {
        O: "Official Fix",
        T: "Temporary Fix",
        W: "Workaround",
        U: "Unavailable",
        X: "Not Defined"
      },
      RC: {
        U: "Unconfirmed",
        R: "Reasonable",
        C: "Confirmed",
        X: "Not Defined"
      }
    };

    const metrics: { [key: string]: string } = {};
    const parts = vectorString.split("/");

    parts.forEach((part) => {
      if (part.includes(":")) {
        const [metric, value] = part.split(":");
        if (vectorMap[metric] && vectorMap[metric][value]) {
          metrics[metric] = vectorMap[metric][value];
        }
      }
    });

    return metrics;
  };

  const cvssData = formatCVSSScore(
    vulnerability.cvss || vulnerability.cvss_severities?.cvss_v3
  );

  return (
    <>
      {/* Summary */}
      {vulnerability.summary && (
        <Card className='mb-3'>
          <Card.Header className='bg-light py-2'>
            <h6 className='mb-0 fw-semibold'>
              <i className='bi bi-list-ul me-2'></i>
              Summary
              <a
                href={vulnerability.detailURL}
                target='_blank'
                rel='noopener noreferrer'
                className='float-right'
                title='Open the source page in separate tab.'
              >
                <i className='bi bi-box-arrow-up-right me-1'></i>
              </a>
            </h6>
          </Card.Header>
          <Card.Body className='py-2'>
            <p className='mb-0 small'>{vulnerability.summary}</p>
          </Card.Body>
        </Card>
      )}

      {/* Basic Information */}
      <Card className='mb-3'>
        <Card.Header className='bg-light py-2'>
          <h6 className='mb-0 fw-semibold'>
            <i className='bi bi-info-circle me-2'></i>
            Security Advisory Details
          </h6>
        </Card.Header>
        <Card.Body className='py-2'>
          <Row className='g-2'>
            <Col xs={12}>
              <div className='security-advisory detailed'>
                <table className='advisory-metadata'>
                  <tbody>
                    {vulnerability.cveId && (
                      <tr>
                        <th>Advisory ID:</th>
                        <td>
                          <strong>{vulnerability.id}</strong>
                        </td>
                      </tr>
                    )}

                    <tr>
                      <th>Severity:</th>
                      <td>
                        <span
                          className={`text-${vulnerability.severity.toLocaleLowerCase()}`}
                        >
                          {vulnerability.severity}
                        </span>
                      </td>
                    </tr>

                    {vulnerability.source && (
                      <tr>
                        <th>Source:</th>
                        <td>
                          {SOURCE_NAME[vulnerability.source] ??
                            vulnerability.source}
                        </td>
                      </tr>
                    )}

                    {vulnerability.source_code_location && (
                      <tr>
                        <th>Source Code:</th>
                        <td>
                          <a
                            href={vulnerability.source_code_location}
                            target='_blank'
                            rel='noopener noreferrer'
                            className='text-decoration-none'
                          >
                            <i className='bi bi-github me-1'></i>
                            View Source
                          </a>
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>

                <hr />

                {vulnerability.affectedVersions &&
                  vulnerability.affectedVersions.length > 0 && (
                    <div>
                      <h4>Affected Package</h4>
                      <table className='package-info mb-3'>
                        <tbody>
                          <tr>
                            <th>Name:</th>
                            <td>
                              <code>{vulnerability.packageName}</code>
                            </td>
                          </tr>
                          <tr>
                            <th>Ecosystem:</th>
                            <td>{vulnerability.ecosystem}</td>
                          </tr>
                        </tbody>
                      </table>

                      <h4>Remediation Guidance</h4>
                      <table className='remediation-info'>
                        <tbody>
                          {vulnerability.patchedVersion && (
                            <tr>
                              <th>Patched Version:</th>
                              <td>
                                <code className='version patched'>
                                  {vulnerability.patchedVersion}
                                </code>
                              </td>
                            </tr>
                          )}

                          <tr>
                            <th>Vulnerable Range:</th>
                            <td>
                              <div className='affected-list'>
                                {vulnerability.affectedVersions
                                  .filter(Boolean)
                                  .map((aff: string) => {
                                    return aff
                                      .split(",")
                                      .map((affected: string) => (
                                        <code
                                          className='version vulnerable me-1'
                                          key={affected}
                                        >
                                          {affected}
                                        </code>
                                      ));
                                  })}
                              </div>
                            </td>
                          </tr>
                        </tbody>
                      </table>

                      {vulnerability.patchedVersion && (
                        <div className='action'>
                          <div>
                            <strong>Recommended Action:</strong>
                          </div>{" "}
                          Upgrade the package to version{" "}
                          <code>{vulnerability.patchedVersion}</code> or later.
                        </div>
                      )}
                    </div>
                  )}
              </div>
            </Col>
          </Row>
        </Card.Body>
      </Card>

      {/* CVSS Information */}
      {cvssData && cvssData.score > 0 && cvssData.vector && (
        <Card className='mb-3'>
          <Card.Header className='bg-light py-2'>
            <h6 className='mb-0 fw-semibold'>
              <i className='bi bi-shield-exclamation me-2'></i>
              CVSS Information
            </h6>
          </Card.Header>
          <Card.Body className='py-2'>
            <Row className='g-2'>
              {cvssData.score > 0 && (
                <Col xs={6}>
                  <div className='d-flex align-items-center mb-2'>
                    <strong className='me-2'>Score:</strong>
                    <Badge
                      bg={
                        cvssData.score >= 9
                          ? "danger"
                          : cvssData.score >= 7
                          ? "warning"
                          : cvssData.score >= 4
                          ? "info"
                          : "success"
                      }
                    >
                      {cvssData.score}/10
                    </Badge>
                  </div>
                </Col>
              )}

              {cvssData.vector && (
                <Col xs={12}>
                  <div className='mb-2'>
                    <strong className='me-2'>Vector String:</strong>
                    <code className='bg-light px-2 py-1 rounded d-block mt-1'>
                      {cvssData.vector}
                    </code>
                  </div>

                  {parseCVSSVector(cvssData.vector) && (
                    <div className='mt-2'>
                      <strong className='d-block mb-2'>
                        Vector Breakdown:
                      </strong>
                      <div className='table-responsive'>
                        <table className='table table-sm mb-0'>
                          <thead className='table-light'>
                            <tr>
                              <th>Metric</th>
                              <th>Value</th>
                              <th>Description</th>
                            </tr>
                          </thead>
                          <tbody>
                            {Object.entries(
                              parseCVSSVector(cvssData.vector) || {}
                            ).map(([metric, value]) => (
                              <tr key={metric}>
                                <td className='fw-semibold'>{metric}</td>
                                <td>{value}</td>
                                <td>
                                  {metric === "AV" && "Attack Vector"}
                                  {metric === "AC" && "Attack Complexity"}
                                  {metric === "PR" && "Privileges Required"}
                                  {metric === "UI" && "User Interaction"}
                                  {metric === "S" && "Scope"}
                                  {metric === "C" && "Confidentiality Impact"}
                                  {metric === "I" && "Integrity Impact"}
                                  {metric === "A" && "Availability Impact"}
                                  {metric === "E" && "Exploitability"}
                                  {metric === "RL" && "Remediation Level"}
                                  {metric === "RC" && "Report Confidence"}
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  )}
                </Col>
              )}
            </Row>
          </Card.Body>
        </Card>
      )}

      {/* EPSS Information */}
      {vulnerability.epss && (
        <Card className='mb-3'>
          <Card.Header className='bg-light py-2'>
            <h6 className='mb-0 fw-semibold'>
              <i className='bi bi-graph-up me-2'></i>
              EPSS Information
            </h6>
          </Card.Header>
          <Card.Body className='py-2'>
            <Row className='g-2'>
              <Col xs={6}>
                <div className='text-center'>
                  <div className='h5 mb-1 text-primary'>
                    {(vulnerability.epss.percentage * 100).toFixed(2)}%
                  </div>
                  <div className='small text-muted'>EPSS Score</div>
                </div>
              </Col>
              <Col xs={6}>
                <div className='text-center'>
                  <div className='h5 mb-1 text-info'>
                    {(vulnerability.epss.percentile * 100).toFixed(1)}%
                  </div>
                  <div className='small text-muted'>Percentile</div>
                </div>
              </Col>
            </Row>
          </Card.Body>
        </Card>
      )}

      {/* Weaknesses */}
      {vulnerability.weaknesses && vulnerability.weaknesses.length > 0 && (
        <Card className='mb-3'>
          <Card.Header className='bg-light py-2'>
            <h6 className='mb-0 fw-semibold'>
              <i className='bi bi-bug me-2'></i>
              Weaknesses (CWE)
            </h6>
          </Card.Header>
          <Card.Body className='py-2'>
            <div className='d-flex flex-wrap gap-2'>
              {vulnerability.weaknesses.map((weakness, index) => (
                <a
                  href={`https://cwe.mitre.org/data/definitions/${
                    weakness.id.split("-")[1]
                  }.html`}
                  key={index}
                  target='_blank'
                  className='text-decoration-none'
                >
                  <div className='small'>
                    {index + 1}. {weakness.id}: {weakness.name}
                  </div>
                </a>
              ))}
            </div>
          </Card.Body>
        </Card>
      )}

      {/* Dates */}
      {(vulnerability.publishedDate || vulnerability.lastModified) && (
        <Card className='mb-3'>
          <Card.Header className='bg-light py-2'>
            <h6 className='mb-0 fw-semibold'>
              <i className='bi bi-calendar me-2'></i>
              Timeline
            </h6>
          </Card.Header>
          <Card.Body className='py-2'>
            <Row className='g-2'>
              <Col xs={12}>
                <div className='mb-2 small'>
                  <strong className='me-2'>Published:</strong>
                  <span className='text-muted'>
                    {formatRelativeTime(vulnerability.publishedDate)}
                  </span>
                </div>
              </Col>

              {vulnerability.lastModified && (
                <Col xs={12}>
                  <div className='mb-2 small'>
                    <strong className='me-2'>Modified:</strong>
                    <span className='text-muted'>
                      {formatRelativeTime(vulnerability.lastModified)}
                    </span>
                  </div>
                </Col>
              )}
            </Row>
          </Card.Body>
        </Card>
      )}

      {/* References */}
      {vulnerability.references && vulnerability.references.length > 0 && (
        <Card className='mb-3'>
          <Card.Header className='bg-light py-2'>
            <h6 className='mb-0 fw-semibold'>
              <i className='bi bi-link-45deg me-2'></i>
              References
            </h6>
          </Card.Header>
          <Card.Body className='py-2'>
            <div className='d-flex flex-column gap-2'>
              {vulnerability.references.map((reference, index) => (
                <a
                  key={index}
                  href={reference}
                  target='_blank'
                  rel='noopener noreferrer'
                  className='text-decoration-none small text-ellipses'
                >
                  <i className='bi bi-external-link me-1'></i>
                  {index + 1}. {reference}
                </a>
              ))}
            </div>
          </Card.Body>
        </Card>
      )}
    </>
  );
}
