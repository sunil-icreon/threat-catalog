import { IVulnerabilityType } from "@/types/vulnerability";
import { useEffect, useRef } from "react";
import { Button, Modal } from "react-bootstrap";
import VulnerabilityDetailContent from "./VulnerabilityDetailContent";

interface VulnerabilityDetailModalProps {
  vulnerability: IVulnerabilityType | null;
  isOpen: boolean;
  onClose: () => void;
}

const severityVariants = {
  CRITICAL: "danger",
  HIGH: "warning",
  MEDIUM: "info",
  LOW: "success"
} as const;

const statusVariants = {
  ACTIVE: "danger",
  RESOLVED: "success",
  MITIGATED: "primary"
} as const;

export default function VulnerabilityDetailModal({
  vulnerability,
  isOpen,
  onClose
}: VulnerabilityDetailModalProps) {
  const modalBodyRef = useRef<HTMLDivElement>(null);

  // Scroll to top when modal opens or vulnerability changes
  useEffect(() => {
    if (isOpen && modalBodyRef.current) {
      // Small delay to ensure DOM is fully rendered
      const timeoutId = setTimeout(() => {
        if (modalBodyRef.current) {
          modalBodyRef.current.scrollTo({
            top: 0,
            behavior: "smooth"
          });
        }
      }, 100);

      return () => clearTimeout(timeoutId);
    }
  }, [isOpen, vulnerability?.id]);

  if (!vulnerability) return null;

  const formatCVSSScore = (cvss: any) => {
    if (!cvss) return null;
    return {
      score: cvss.score || cvss.cvss_v3?.score,
      vector: cvss.vector_string || cvss.cvss_v3?.vector_string
    };
  };

  /**
   * Parses CVSS vector string into human-readable format
   * Example: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
   * becomes a table with Attack Vector: Network, Attack Complexity: Low, etc.
   */
  const parseCVSSVector = (vectorString: string) => {
    if (!vectorString) return null;

    const vectorMap: { [key: string]: { [key: string]: string } } = {
      AV: {
        N: "Network",
        A: "Adjacent Network",
        L: "Local",
        P: "Physical"
      },
      AC: {
        L: "Low",
        H: "High"
      },
      PR: {
        N: "None",
        L: "Low",
        H: "High"
      },
      UI: {
        N: "None",
        R: "Required"
      },
      S: {
        U: "Unchanged",
        C: "Changed"
      },
      C: {
        N: "None",
        L: "Low",
        H: "High"
      },
      I: {
        N: "None",
        L: "Low",
        H: "High"
      },
      A: {
        N: "None",
        L: "Low",
        H: "High"
      },
      E: {
        U: "Unproven",
        P: "Proof of Concept",
        F: "Functional",
        H: "High",
        X: "Not Defined"
      },
      RL: {
        O: "Official Fix",
        T: "Temporary Fix",
        W: "Workaround",
        U: "Unavailable",
        X: "Not Defined"
      },
      RC: {
        U: "Unconfirmed",
        R: "Reasonable",
        C: "Confirmed",
        X: "Not Defined"
      }
    };

    const metrics: { [key: string]: string } = {};
    const parts = vectorString.split("/");

    parts.forEach((part) => {
      if (part.includes(":")) {
        const [metric, value] = part.split(":");
        if (vectorMap[metric] && vectorMap[metric][value]) {
          metrics[metric] = vectorMap[metric][value];
        }
      }
    });

    return metrics;
  };

  const cvssData = formatCVSSScore(
    vulnerability.cvss || vulnerability.cvss_severities?.cvss_v3
  );

  return (
    <Modal
      show={isOpen}
      onHide={onClose}
      fullscreen
      className='vulnerability-detail-modal'
    >
      <Modal.Header className='bg-primary text-white'>
        <Modal.Title className='d-flex align-items-center'>
          <i className='bi bi-shield-exclamation me-2'></i>
          Vulnerability Details
        </Modal.Title>
        <Button
          variant='outline-light'
          size='sm'
          onClick={onClose}
          className='p-1'
        >
          <i className='bi bi-x-lg'></i>
        </Button>
      </Modal.Header>

      <Modal.Body className='p-3 small mb-5' ref={modalBodyRef}>
        <VulnerabilityDetailContent vulnerability={vulnerability} />
      </Modal.Body>
    </Modal>
  );
}
