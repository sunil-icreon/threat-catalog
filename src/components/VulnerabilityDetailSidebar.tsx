import { IVulnerabilityType } from "@/types/vulnerability";
import { ECOSYSTEM_NAME, SOURCE_NAME } from "@/utilities/constants";
import { formatRelativeTime } from "@/utilities/util";
import { useEffect, useRef } from "react";
import { Badge, Button, Card } from "react-bootstrap";
import { PackageDetailLink } from "./shared/PackageDetailLink";
import { CountPill, RenderAffectedPill } from "./shared/UtilityComponents";

interface VulnerabilityDetailSidebarProps {
  vulnerability: IVulnerabilityType | null;
  isOpen: boolean;
  onClose: () => void;
}

const severityVariants = {
  CRITICAL: "danger",
  HIGH: "warning",
  MEDIUM: "info",
  LOW: "success"
} as const;

const statusVariants = {
  ACTIVE: "danger",
  RESOLVED: "success",
  MITIGATED: "primary"
} as const;

export default function VulnerabilityDetailSidebar({
  vulnerability,
  isOpen,
  onClose
}: VulnerabilityDetailSidebarProps) {
  const sidebarContentRef = useRef<HTMLDivElement>(null);

  // Scroll to top when sidebar opens or vulnerability changes
  useEffect(() => {
    if (isOpen && sidebarContentRef.current) {
      // Small delay to ensure DOM is fully rendered
      const timeoutId = setTimeout(() => {
        if (sidebarContentRef.current) {
          sidebarContentRef.current.scrollTo({
            top: 0,
            behavior: "smooth"
          });
        }
      }, 100);

      return () => clearTimeout(timeoutId);
    }
  }, [isOpen, vulnerability?.id]);

  if (!vulnerability) return null;

  const formatCVSSScore = (cvss: any) => {
    if (!cvss) return null;
    return {
      score: cvss.score || cvss.cvss_v3?.score,
      vector: cvss.vector_string || cvss.cvss_v3?.vector_string
    };
  };

  /**
   * Parses CVSS vector string into human-readable format
   * Example: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
   * becomes a table with Attack Vector: Network, Attack Complexity: Low, etc.
   */
  const parseCVSSVector = (vectorString: string) => {
    if (!vectorString) return null;

    const vectorMap: { [key: string]: { [key: string]: string } } = {
      AV: {
        N: "Network",
        A: "Adjacent Network",
        L: "Local",
        P: "Physical"
      },
      AC: {
        L: "Low",
        H: "High"
      },
      PR: {
        N: "None",
        L: "Low",
        H: "High"
      },
      UI: {
        N: "None",
        R: "Required"
      },
      S: {
        U: "Unchanged",
        C: "Changed"
      },
      C: {
        N: "None",
        L: "Low",
        H: "High"
      },
      I: {
        N: "None",
        L: "Low",
        H: "High"
      },
      A: {
        N: "None",
        L: "Low",
        H: "High"
      },
      E: {
        U: "Unproven",
        P: "Proof of Concept",
        F: "Functional",
        H: "High",
        X: "Not Defined"
      },
      RL: {
        O: "Official Fix",
        T: "Temporary Fix",
        W: "Workaround",
        U: "Unavailable",
        X: "Not Defined"
      },
      RC: {
        U: "Unconfirmed",
        R: "Reasonable",
        C: "Confirmed",
        X: "Not Defined"
      }
    };

    const metrics: { [key: string]: string } = {};
    const parts = vectorString.split("/");

    parts.forEach((part) => {
      if (part.includes(":")) {
        const [metric, value] = part.split(":");
        if (vectorMap[metric] && vectorMap[metric][value]) {
          metrics[metric] = vectorMap[metric][value];
        }
      }
    });

    return metrics;
  };

  const cvssData = formatCVSSScore(
    vulnerability.cvss || vulnerability.cvss_severities?.cvss_v3
  );

  return (
    <div className={`vulnerability-sidebar ${isOpen ? "open" : ""}`}>
      <div className='sidebar-overlay' onClick={onClose}></div>
      <div className='sidebar-content' ref={sidebarContentRef}>
        {/* Header */}
        <div className='sidebar-header d-flex justify-content-between align-items-center mb-3'>
          <h5 className='mb-0 fw-bold'>Vulnerability Details</h5>
          <Button
            variant='outline-secondary'
            size='sm'
            onClick={onClose}
            className='p-1'
          >
            <i className='bi bi-x-lg'></i>
          </Button>
        </div>

        {/* Summary */}
        {vulnerability.summary && (
          <Card className='mb-3'>
            <Card.Header className='bg-light py-2'>
              <h6 className='mb-0 fw-semibold small'>
                <i className='bi bi-list-ul me-1'></i>
                Summary
                <a
                  href={vulnerability.detailURL}
                  target='_blank'
                  rel='noopener noreferrer'
                  className='float-right'
                  title='Open the source page in separate tab.'
                >
                  <i className='bi bi-box-arrow-up-right me-1'></i>
                </a>
              </h6>
            </Card.Header>
            <Card.Body className='py-2'>
              <p className='mb-0 small'>{vulnerability.summary}</p>
            </Card.Body>
          </Card>
        )}

        {/* Basic Information */}
        <Card className='mb-3'>
          <Card.Header className='bg-light py-2'>
            <h6 className='mb-0 fw-semibold small'>
              <i className='bi bi-info-circle me-1'></i>
              Basic Information
            </h6>
          </Card.Header>
          <Card.Body className='py-2'>
            <div className='row g-2'>
              <div className='col-12'>
                <div className='d-flex align-items-center mb-1'>
                  <strong className='me-2 small'>ID:</strong>
                  <code className='bg-light px-2 py-1 rounded small'>
                    {vulnerability.id}
                  </code>
                </div>
              </div>

              {vulnerability.cveId && (
                <div className='col-12'>
                  <div className='d-flex align-items-center mb-1'>
                    <strong className='me-2 small'>CVE ID:</strong>
                    <code className='bg-light px-2 py-1 rounded small'>
                      {vulnerability.cveId}
                    </code>
                  </div>
                </div>
              )}

              <div className='col-6'>
                <div className='d-flex align-items-center mb-1'>
                  <strong className='me-2 small'>Severity:</strong>
                  <Badge
                    bg={severityVariants[vulnerability.severity]}
                    className='text-capitalize small'
                  >
                    {vulnerability.severity}
                  </Badge>
                </div>
              </div>

              <div className='col-6'>
                <div className='d-flex align-items-center mb-1'>
                  <strong className='me-2 small'>Status:</strong>
                  <Badge
                    bg={statusVariants[vulnerability.status || "ACTIVE"]}
                    className='text-capitalize small'
                  >
                    {vulnerability.status || "ACTIVE"}
                  </Badge>
                </div>
              </div>

              {vulnerability.source && (
                <div className='col-12'>
                  <div className='d-flex align-items-center mb-1'>
                    <strong className='me-2 small'>Source:</strong>
                    <Badge
                      bg='outline'
                      className={`ecosystem-${vulnerability.ecosystem} text-capitalize small`}
                    >
                      {SOURCE_NAME[vulnerability.source] ??
                        vulnerability.source}
                    </Badge>
                  </div>
                </div>
              )}
            </div>
          </Card.Body>
        </Card>

        {/* Package Information */}
        <Card className='mb-3'>
          <Card.Header className='bg-light py-2'>
            <h6 className='mb-0 fw-semibold small'>
              <i className='bi bi-box me-1'></i>
              Package Information
            </h6>
          </Card.Header>
          <Card.Body className='py-2'>
            <div className='row g-2'>
              <div className='col-12'>
                <div className='mb-1'>
                  <strong className='me-2 small'>Package:</strong>
                  <PackageDetailLink
                    ecoSystem={vulnerability.ecosystem}
                    packageName={vulnerability.packageName}
                  />
                </div>
              </div>

              <div className='col-6'>
                <div className='mb-1'>
                  <strong className='me-2 small'>Ecosystem:</strong>
                  <Badge
                    bg='outline'
                    className={`ecosystem-${vulnerability.ecosystem} text-capitalize small`}
                  >
                    {ECOSYSTEM_NAME[vulnerability.ecosystem] ??
                      vulnerability.ecosystem}
                  </Badge>
                </div>
              </div>

              {vulnerability.affectedVersions &&
                vulnerability.affectedVersions.length > 0 && (
                  <div className='col-12'>
                    <div className='mb-1'>
                      <RenderAffectedPill
                        affectedVersions={vulnerability.affectedVersions}
                        className='mt-1'
                        variant='red'
                        label='Affected Versions'
                      />
                    </div>
                  </div>
                )}

              {vulnerability.patchedVersion && (
                <div className='col-12'>
                  <div className='mb-1'>
                    <CountPill
                      count={[vulnerability.patchedVersion]}
                      className='mt-1'
                      variant='green'
                      label='Patched Versions'
                    />
                  </div>
                </div>
              )}

              {vulnerability.source_code_location && (
                <div className='col-12'>
                  <div className='mb-1'>
                    <strong className='me-2 small'>Source Code:</strong>
                    <a
                      href={vulnerability.source_code_location}
                      target='_blank'
                      rel='noopener noreferrer'
                      className='text-decoration-none small'
                    >
                      <i className='bi bi-github me-1'></i>
                      View Source
                    </a>
                  </div>
                </div>
              )}
            </div>
          </Card.Body>
        </Card>

        {/* CVSS Information */}
        {cvssData && cvssData.score > 0 && cvssData.vector && (
          <Card className='mb-3'>
            <Card.Header className='bg-light py-2'>
              <h6 className='mb-0 fw-semibold small'>
                <i className='bi bi-shield-exclamation me-1'></i>
                CVSS Information
              </h6>
            </Card.Header>
            <Card.Body className='py-2'>
              <div className='row g-2'>
                {cvssData.score > 0 && (
                  <div className='col-6'>
                    <div className='d-flex align-items-center mb-1'>
                      <strong className='me-2 small'>Score:</strong>
                      <Badge
                        bg={
                          cvssData.score >= 9
                            ? "danger"
                            : cvssData.score >= 7
                            ? "warning"
                            : cvssData.score >= 4
                            ? "info"
                            : "success"
                        }
                        className='small'
                      >
                        {cvssData.score}/10
                      </Badge>
                    </div>
                  </div>
                )}

                {cvssData.vector && (
                  <div className='col-12'>
                    <div className='mb-2'>
                      <strong className='me-2 small'>Vector String:</strong>
                      <code className='bg-light px-2 py-1 rounded small d-block mt-1'>
                        {cvssData.vector}
                      </code>
                    </div>

                    {parseCVSSVector(cvssData.vector) && (
                      <div className='mt-2'>
                        <strong className='small d-block mb-2'>
                          Vector Breakdown:
                        </strong>
                        <div className='table-responsive'>
                          <table className='table table-sm table-bordered mb-0'>
                            <thead className='table-light'>
                              <tr>
                                <th className='small'>Metric</th>
                                <th className='small'>Value</th>
                                <th className='small'>Description</th>
                              </tr>
                            </thead>
                            <tbody>
                              {Object.entries(
                                parseCVSSVector(cvssData.vector) || {}
                              ).map(([metric, value]) => (
                                <tr key={metric}>
                                  <td className='small fw-semibold'>
                                    {metric}
                                  </td>
                                  <td className='small'>
                                    <Badge
                                      bg={
                                        value === "High" ||
                                        value === "Network" ||
                                        value === "Required" ||
                                        value === "Changed" ||
                                        value === "Confirmed" ||
                                        value === "Functional"
                                          ? "danger"
                                          : value === "Low" ||
                                            value === "Local" ||
                                            value === "Unchanged" ||
                                            value === "Official Fix" ||
                                            value === "Reasonable"
                                          ? "success"
                                          : value === "None" ||
                                            value === "Physical" ||
                                            value === "Unavailable" ||
                                            value === "Unconfirmed" ||
                                            value === "Unproven"
                                          ? "secondary"
                                          : "info"
                                      }
                                      className='small'
                                    >
                                      {value}
                                    </Badge>
                                  </td>
                                  <td className='small'>
                                    {metric === "AV" && "Attack Vector"}
                                    {metric === "AC" && "Attack Complexity"}
                                    {metric === "PR" && "Privileges Required"}
                                    {metric === "UI" && "User Interaction"}
                                    {metric === "S" && "Scope"}
                                    {metric === "C" && "Confidentiality Impact"}
                                    {metric === "I" && "Integrity Impact"}
                                    {metric === "A" && "Availability Impact"}
                                    {metric === "E" && "Exploitability"}
                                    {metric === "RL" && "Remediation Level"}
                                    {metric === "RC" && "Report Confidence"}
                                  </td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </Card.Body>
          </Card>
        )}

        {/* EPSS Information */}
        {vulnerability.epss && (
          <Card className='mb-3'>
            <Card.Header className='bg-light py-2'>
              <h6 className='mb-0 fw-semibold small'>
                <i className='bi bi-graph-up me-1'></i>
                EPSS Information
              </h6>
            </Card.Header>
            <Card.Body className='py-2'>
              <div className='row g-2'>
                <div className='col-6'>
                  <div className='text-center'>
                    <div className='h6 mb-1 text-primary'>
                      {(vulnerability.epss.percentage * 100).toFixed(2)}%
                    </div>
                    <div className='small text-muted'>EPSS Score</div>
                  </div>
                </div>
                <div className='col-6'>
                  <div className='text-center'>
                    <div className='h6 mb-1 text-info'>
                      {(vulnerability.epss.percentile * 100).toFixed(1)}%
                    </div>
                    <div className='small text-muted'>Percentile</div>
                  </div>
                </div>
              </div>
            </Card.Body>
          </Card>
        )}

        {/* Weaknesses */}
        {vulnerability.weaknesses && vulnerability.weaknesses.length > 0 && (
          <Card className='mb-3'>
            <Card.Header className='bg-light py-2'>
              <h6 className='mb-0 fw-semibold small'>
                <i className='bi bi-bug me-1'></i>
                Weaknesses (CWE)
              </h6>
            </Card.Header>
            <Card.Body className='py-2'>
              <div className='d-flex flex-wrap gap-1'>
                {vulnerability.weaknesses.map((weakness, index) => (
                  <a
                    href={`https://cwe.mitre.org/data/definitions/${
                      weakness.id.split("-")[1]
                    }.html`}
                    key={index}
                    target='_blank'
                    className='alt-link text-decoration-none'
                  >
                    <div className='fw-semibold small'>
                      {index + 1}. {weakness.id}: {weakness.name}
                    </div>
                  </a>
                ))}
              </div>
            </Card.Body>
          </Card>
        )}

        {/* Description */}
        {vulnerability.description && (
          <Card className='mb-3'>
            <Card.Header className='bg-light py-2'>
              <h6 className='mb-0 fw-semibold small'>
                <i className='bi bi-file-text me-1'></i>
                Description
              </h6>
            </Card.Header>
            <Card.Body className='py-2'>
              <p className='mb-0 small'>{vulnerability.description}</p>
            </Card.Body>
          </Card>
        )}

        {/* Dates */}
        {(vulnerability.publishedDate || vulnerability.lastModified) && (
          <Card className='mb-3'>
            <Card.Header className='bg-light py-2'>
              <h6 className='mb-0 fw-semibold small'>
                <i className='bi bi-calendar me-1'></i>
                Timeline
              </h6>
            </Card.Header>
            <Card.Body className='py-2'>
              <div className='row g-2'>
                <div className='col-6'>
                  <div className='mb-1'>
                    <strong className='me-2 small'>Published:</strong>
                    <span className='text-muted small'>
                      {formatRelativeTime(vulnerability.publishedDate)}
                    </span>
                  </div>
                </div>

                {vulnerability.lastModified && (
                  <div className='col-6'>
                    <div className='mb-1'>
                      <strong className='me-2 small'>Modified:</strong>
                      <span className='text-muted small'>
                        {formatRelativeTime(vulnerability.lastModified)}
                      </span>
                    </div>
                  </div>
                )}
              </div>
            </Card.Body>
          </Card>
        )}

        {/* References */}
        {vulnerability.references && vulnerability.references.length > 0 && (
          <Card className='mb-3'>
            <Card.Header className='bg-light py-2'>
              <h6 className='mb-0 fw-semibold small'>
                <i className='bi bi-link-45deg me-1'></i>
                References
              </h6>
            </Card.Header>
            <Card.Body className='py-2'>
              <div className='d-flex flex-column gap-1'>
                {vulnerability.references.map((reference, index) => (
                  <a
                    key={index}
                    href={reference}
                    target='_blank'
                    rel='noopener noreferrer'
                    className='text-decoration-none small text-ellipses'
                  >
                    <i className='bi bi-external-link me-1'></i>
                    {index + 1}. {reference}
                  </a>
                ))}
              </div>
            </Card.Body>
          </Card>
        )}
      </div>
    </div>
  );
}
