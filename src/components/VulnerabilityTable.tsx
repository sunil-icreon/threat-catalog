import { EPSSData, formatRelativeTime } from "@/utilities/util";
import { Badge, Table } from "react-bootstrap";

import { IVariantType, IVulnerabilityType } from "@/types/vulnerability";
import { ECOSYSTEM_NAME } from "@/utilities/constants";
import { AdvisoryDetailLink } from "./shared/AdvisoryDetailLink";
import { PackageDetailLink } from "./shared/PackageDetailLink";
import {
  CountPill,
  RenderAffectedPill,
  RenderEPSS
} from "./shared/UtilityComponents";

interface VulnerabilityTableProps {
  vulnerabilities: IVulnerabilityType[];
  onVulnerabilityClick?: (vulnerability: IVulnerabilityType) => void;
}

const severityVariants = {
  CRITICAL: "danger",
  HIGH: "warning",
  MEDIUM: "info",
  LOW: "success"
} as const;

const statusVariants = {
  ACTIVE: "danger",
  RESOLVED: "success",
  MITIGATED: "primary"
} as const;

export default function VulnerabilityTable({
  vulnerabilities,
  onVulnerabilityClick
}: VulnerabilityTableProps) {
  return (
    <div className='table-responsive border rounded'>
      <Table striped hover className='mb-0 table-hover'>
        <thead className='table-dark'>
          <tr>
            <th>Title</th>
            <th style={{ width: "300px" }}>Affected</th>
            <th style={{ width: "120px" }}>Fixed</th>
            <th style={{ width: "80px" }}>Severity</th>
            <th style={{ width: "80px" }}>EPSS</th>
            <th style={{ width: "120px" }}>Published</th>
          </tr>
        </thead>
        <tbody>
          {vulnerabilities.map((vulnerability) => (
            <tr key={vulnerability.id}>
              <td>
                <div className='fw-semibold text-dark mb-1'>
                  <div className='small'>
                    <AdvisoryDetailLink
                      vulnerability={vulnerability}
                      onVulnerabilityClick={onVulnerabilityClick}
                    />
                  </div>
                </div>

                <div className='flex flex-justify-start severity-badge'>
                  <Badge
                    bg='outline'
                    className={`ecosystem-${vulnerability.ecosystem} text-capitalize me-2 m`}
                  >
                    {ECOSYSTEM_NAME[vulnerability.ecosystem] ??
                      vulnerability.ecosystem}
                  </Badge>

                  {vulnerability.cveId && (
                    <code className='bg-light px-2 py-1 rounded small me-2'>
                      {vulnerability.cveId}
                    </code>
                  )}

                  {vulnerability.score ? (
                    <code className='bg-light px-2 py-1 rounded break-all small'>
                      <strong>Score:{vulnerability.score}/10</strong>
                    </code>
                  ) : (
                    <></>
                  )}

                  {vulnerability.source && (
                    <Badge
                      bg='outline'
                      title='Source'
                      className={`ecosystem-maven text-capitalize me-2 m`}
                    >
                      {vulnerability.source}
                    </Badge>
                  )}
                </div>
              </td>
              <td>
                <div className='package-name-cell-content'>
                  <PackageDetailLink
                    ecoSystem={vulnerability.ecosystem}
                    packageName={vulnerability.packageName}
                  />

                  <RenderAffectedPill
                    affectedVersions={vulnerability.affectedVersions}
                    className='mt-1'
                  />
                </div>
              </td>

              <td>
                {vulnerability.patchedVersion && (
                  <CountPill
                    count={vulnerability.patchedVersion}
                    variant='green'
                  />
                )}
              </td>
              <td>
                <CountPill
                  count={vulnerability.severity}
                  variant={vulnerability.severity.toLowerCase() as IVariantType}
                  className='text-capitalize me-2 w-70-px'
                />
              </td>
              <td>
                {vulnerability?.epss?.percentage ? (
                  <RenderEPSS
                    epss={vulnerability?.epss as EPSSData}
                    displayType='table'
                  />
                ) : (
                  <></>
                )}
              </td>
              <td>
                <div className='small text-muted'>
                  {formatRelativeTime(vulnerability.publishedDate)}
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
    </div>
  );
}
