import { EPSSData, formatRelativeTime } from "@/utilities/util";
import { Table } from "react-bootstrap";

import { IVulnerabilityType } from "@/types/vulnerability";
import { ECOSYSTEM_NAME } from "@/utilities/constants";
import { AdvisoryDetailLink } from "./shared/AdvisoryDetailLink";
import { PackageDetailLink } from "./shared/PackageDetailLink";
import {
  AffectedVersionTags,
  CountPill,
  RenderEPSS
} from "./shared/UtilityComponents";

interface VulnerabilityTableProps {
  vulnerabilities: IVulnerabilityType[];
  onVulnerabilityClick?: (vulnerability: IVulnerabilityType) => void;
}

const severityVariants = {
  CRITICAL: "danger",
  HIGH: "warning",
  MEDIUM: "info",
  LOW: "success"
} as const;

const statusVariants = {
  ACTIVE: "danger",
  RESOLVED: "success",
  MITIGATED: "primary"
} as const;

export default function VulnerabilityTable({
  vulnerabilities,
  onVulnerabilityClick
}: VulnerabilityTableProps) {
  return (
    <div className='table-responsive border rounded'>
      <Table striped hover className='mb-0 table-hover'>
        <thead className='table-dark'>
          <tr>
            <th>Title</th>
            <th style={{ width: "300px" }}>Package</th>
            <th style={{ width: "130px" }}>Fixed</th>
            <th style={{ width: "100px" }}>Severity</th>
            <th style={{ width: "80px" }}>EPSS</th>
            <th style={{ width: "120px" }}>Published</th>
          </tr>
        </thead>
        <tbody>
          {vulnerabilities.map((vulnerability) => (
            <tr key={vulnerability.id}>
              <td>
                <div className='fw-semibold text-dark mb-1'>
                  <div className='small'>
                    <AdvisoryDetailLink
                      vulnerability={vulnerability}
                      onVulnerabilityClick={onVulnerabilityClick}
                    />
                  </div>
                </div>

                <div className='d-flex flex-justify-start gap-3'>
                  <CountPill
                    count={
                      ECOSYSTEM_NAME[vulnerability.ecosystem] ??
                      vulnerability.ecosystem
                    }
                    variant='green'
                  />

                  {vulnerability.cveId ? (
                    <CountPill
                      count={vulnerability.cveId}
                      label='CVE'
                      variant='grey'
                    />
                  ) : (
                    <></>
                  )}

                  {vulnerability.score ? (
                    <div
                      className='d-flex align-items-center text-muted small ms-2'
                      title='Score'
                    >
                      <i className='bi bi-shield-exclamation me-1'></i>
                      <strong className='text-dark'>
                        {vulnerability.score}/10
                      </strong>
                    </div>
                  ) : (
                    <></>
                  )}
                </div>
              </td>
              <td>
                <div className='package-name-cell-content'>
                  <PackageDetailLink
                    ecoSystem={vulnerability.ecosystem}
                    packageName={vulnerability.packageName}
                  />

                  {vulnerability.affectedVersions && (
                    <AffectedVersionTags
                      affectedVersions={vulnerability.affectedVersions}
                    />
                  )}
                </div>
              </td>

              <td>
                {vulnerability.patchedVersion ? (
                  <PackageDetailLink
                    ecoSystem={vulnerability.ecosystem}
                    packageName={vulnerability.packageName}
                    label={vulnerability.patchedVersion}
                    version={vulnerability.patchedVersion}
                    className='text-green small text-decoration-none'
                  />
                ) : (
                  <span className='text-high small'>No Fix Available</span>
                )}
              </td>
              <td>
                <span
                  className={`text-${vulnerability.severity.toLowerCase()} small`}
                >
                  {vulnerability.severity}
                </span>
              </td>
              <td>
                {vulnerability?.epss?.percentage ? (
                  <RenderEPSS
                    epss={vulnerability?.epss as EPSSData}
                    displayType='table'
                  />
                ) : (
                  <></>
                )}
              </td>

              <td>
                <div className='small text-muted'>
                  {formatRelativeTime(vulnerability.publishedDate)}
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
    </div>
  );
}
