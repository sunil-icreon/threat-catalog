export const SEVERITY_TYPE = {
  CRITICAL: "CRITICAL",
  HIGH: "HIGH",
  MEDIUM: "MEDIUM",
  LOW: "LOW"
};

export type ISecerityType = keyof typeof SEVERITY_TYPE;

export type IEcoSystemType = keyof typeof ECO_SYSTEM;

export type IRecord = Record<string, any>;

export interface IVulnerabilityType {
  id: string;
  description?: string;
  severity: ISecerityType;
  ecosystem: IEcoSystemType;
  packageName: string;
  packageVersion?: string;
  cveId?: string;
  publishedDate: string;
  lastModified?: string;
  affectedVersions?: string[];
  references?: string[];
  cvssScore?: number;
  status?: "ACTIVE" | "RESOLVED" | "MITIGATED";
  source?: "OSV" | "Synk" | "GHSA";
  version: string;
  patchedVersion?: string;
  summary?: string;
  publishedRelative?: string;
  modifiedDate?: string;
  detailURL?: string;
  affected: Array<any>;
  score?: number;
  cvss?: IRecord;
  html_url?: string;
  cvss_severities?: IRecord;
  cve_id?: string;
  epss?: IRecord;
  sha256?: string;
  issues?: Array<{ id: string; name: string }>;
  reviewed?: boolean;
  type?: typeof VULNERABILITY_TYPE.VULNERABILITY;
  cwes?: Array<IRecord>;
  source_code_location?: string;
}

export interface VulnerabilityFilters {
  ecosystem?: string;
  severity?: string;
  status?: string;
  search?: string;
}

export interface VulnerabilityResponse {
  vulnerabilities: IVulnerabilityType[];
  stats: IStatCacheType;
  total: number;
}

const VULNERABILITY_TYPE = {
  VULNERABILITY: 1,
  MALWARE: 2
};

const ECO_SYSTEM = {
  NPM: "npm",
  MAVEN: "maven",
  NUGET: "nuget"
};

export interface IDBRowType {
  fetchedAt: string;
  advisories: Array<IVulnerabilityType>;
  count: number;
  duration: number;
  name: string;
}

export interface IStatCacheType {
  ecosystem: IRecord;
  severity: IRecord;
  lastRefresh: string;
  duration: IRecord;
}

export type SeverityStats = {
  [severity: string]: {
    total: number;
    [ecosystem: string]: number; // e.g. npm, maven, pypi
  };
};
